{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/PhoneService.js","services/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newSearch","handleSearchChange","value","onChange","PersonForm","addName","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","Persons","persons","deletePerson","filteredList","concat","forEach","filteredPerson","name","toUpperCase","includes","push","map","person","i","key","number","onClick","axios","get","then","response","data","newObject","post","id","delete","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","setMessage","useEffect","PhoneService","initialPersons","event","console","log","target","preventDefault","nameObject","some","e","window","alert","returnedPerson","setTimeout","confirm","removedPerson","filter","persona","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbc507d0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({newSearch, handleSearchChange}) => {\r\n    return (\r\n        <div>\r\n            <form>\r\n                filter shown with <input \r\n                value={newSearch} \r\n                onChange={handleSearchChange}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({ addName, newName, newNumber,\r\n    handleNameChange, handleNumberChange }) => {\r\n    return (\r\n        <form onSubmit={addName}>\r\n            <div>\r\n                name: <input\r\n                    value={newName}\r\n                    onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input\r\n                    value={newNumber}\r\n                    onChange={handleNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = ({ persons, newSearch, deletePerson }) => {\r\n    let filteredList = []\r\n    if (newSearch === '') {\r\n        filteredList = persons.concat()\r\n    } else {\r\n        persons.forEach(filteredPerson => {\r\n            if (filteredPerson.name.toUpperCase().includes(newSearch.toUpperCase())) {\r\n                filteredList.push(filteredPerson)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {filteredList.map((person, i) => \r\n                <li key={i}>\r\n                    {person.name} {person.number} \r\n                    <button onClick={() => \r\n                        deletePerson(person)}>delete</button>\r\n                </li>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Persons","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"message\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  export default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport PhoneService from './services/PhoneService'\nimport Notification from './services/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearch, setNewSearch] = useState('')\n  const [message, setMessage] =useState(null)\n\n  useEffect(() => {\n    PhoneService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(e => e.name === newName)) {\n      window.alert(newName + ' is already added to phonebook')\n    } else {\n      setPersons(persons.concat(nameObject))\n    }\n\n    PhoneService\n      .create(nameObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setMessage(\n          \"Added \" + returnedPerson.name\n        )\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n      \n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    console.log(event.target.value)\n    setNewSearch(event.target.value)\n  }\n\n  const deletePerson = person => {\n    if (window.confirm(\"Delete \" + person.name + \" ?\")) {\n\n      PhoneService\n        .remove(person.id)\n        .then(removedPerson => {\n          setPersons(persons.filter(persona => persona.id !== person.id))\n          setMessage(\n            \"Deleted \" + person.name\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n        \n    }\n  }\n\n  return (\n    <div>\n\n      <h2>Phonebook</h2>\n      <Notification message={message}/>\n      <div>\n        <Filter newSearch={newSearch} handleSearchChange={handleSearchChange} />\n      </div>\n\n      <h3>Add a new</h3>\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber}\n        handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n\n      <h3>Numbers</h3>\n      <Persons persons={persons} newSearch={newSearch} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}